   PowerPlusWaterMarkObject1

                                                             OpenLCB Technical Note

                                                           OpenLCB Unique Identifiers

                                                   Feb 8, 2015                        Preliminary           

                                                1 Introduction

   This Technical Note contains informative discussion and background for the corresponding “OpenLCB Unique
   Identifiers Standard”. This explanation is not normative in any way.ode IDs usage. ns, which includes
   Dnique Iuode IDs. Therefore, the Standard and this Technical Note are generally written in terms of ns
   beyond just Dnique Iuode IDs”. Other uses were found for these IDs that didn't associate them with a
   specific node, which demonstrated the need for n

   Originally, OpenLCB was defined in terms of 48-bit unique “

                                        2 Annotations to the Standard

   This section provides background information on corresponding sections of the Standard document. It's
   expected that two documents will be read together.

2.1 Introduction

   Originally, OpenLCB was defined in terms of 48-bit unique “Node IDs”. Other uses were found for these
   IDs that didn't associate them with a specific node, which demonstrated the need for Unique Identifiers
   beyond just Node IDs. Therefore, the Standard and this Technical Note are generally written in terms of
   Unique Identifiers, which includes Node IDs usage.

2.2 Intended Use

   The "globally unique" requirement only refers to the universe of connected nodes; nodes that never need
   to communicate with each other need not have separate Node IDs. In general, however, nodes can move:
   Tthey can be sold or loaned for use on another layout, nodes on modular layouts can be connected to
   other arbitrary modules, and few assumptions can be made. It' is best if nodes are given a completely
   uunique IDidentifier when manufactured, so there's no need to ever detect and resolve a conflict.

2.3 References and Context

   This technical note is in the context of the following OpenLCB Standards:

     * The Message Network Standard, which defines the basic messages and how they interact. Higher-level
       protocols are based on this message network, but are defined elsewhere.

     * The Event Identification Standard, which defines the well-known Events Identifiers.

2.4 Content and Format

   The Standards don't require any particular human-readable format for input and output, but hex-pairs
   with separators, e.g (example:. 01.AB.34.01.CD.E3, ) are recommended by the Common Information TN. If
   any other format is used, including decimal pairs, it's very important to make it clear how to interpret
   it.

   There are many methods to store a uUnique iIdentifier, and that's not constrained by this Standard. It
   could be stored in a non-volatile memory, as jumpers on a board, etc.

2.5 Allocation

   Unique IDdentifiers are assigned via a delegation process. At the highest level, ranges are assigned to
   people and organizations, within which they are responsible for assigning unique identifiers to separate
   devices. These ranges can be subdivided and delegated further, as needed. Additional ranges can then be
   requested, which will eventually be recorded herein the Unique Identifier Standard or eventually in some
   online system accessible to anybody. . The OpenLCB organization reserves the right to allocate Unique
   Identifiers within a separate database in real-time and periodically update the Unique Identifier
   Standard document from this database. In the unlikely event that a conflict shall arise between OpenLCB
   managed real-time database and the Unique Identifiers Standard, the Unique Identifiers Standard, the
   Unique Identifiers Standard document represents the true allocation.

   One of the reasons for having a long, 48-bit uUnique iIdentifier space is to make it easier to use a
   delegation system like this. Because there are a lot of possible uUnique iIdentifiers, large ranges can
   be delegated to groups without having to ensure that the range be efficiently used. For example, most
   NMRA members will not design their own OpenLCB nodes and need to assign node IDs, but assigning a range
   to every member makes it easy for those who want to, at a total cost of only 0.000016% of the available
   uUnique iIdentifier space.

   In these delegated assignments, the lower order byte(s) are self-assigned. The value of zero should be
   reserved, indicating that a number within the range hasn't been assigned.

   The high byte of each range is different for each type of assignment, making it easy to determine the
   allocation pattern in use for a particular uUnique iIdentifier.

   Allocations are meant to be unique forever, so the specification requires that new allocation ranges not
   overlap existing ones, and allocation regions not be reused later.

  2.5.1 Globally defined Unique Identifiers

   In addition to use as node identifiers (node IDs), OpenLCB unique identifiers are used to ensure
   uniqueness of specific global event identifiers and for other purposes. These numbers must be allocated
   so that they are kept unique. The identifiers specified in this section are of that type.

   Note that the detailed use of these identifiers is specified elsewhere. In some cases, the protocols are
   still being developed, and the entry here is just reserving a range for a specific future
   use.Manufacturer Specific

   faults” doesn't lose the self-assigned part of the Node ID, (example: e.g. the serial number).

  2.5.2 Well-Known Global Identifiers

   In addition to use as node identifiers (node IDs), OpenLCB unique identifiers are used to ensure
   uniqueness of specific global event identifiers and for other purposes. These numbers must be allocated
   so that they are kept unique. The identifiers specified in this section are of that type.

   Note that the detailed use of these identifiers is specified elsewhere. In some cases, the protocols are
   still being developed, and the entry here is just reserving a range for a specific future use.

  2.5.3 Unique identifiers assigned by members of organized groupsSelf-Assigning Groups

   MERG kit builders and others would like to assign their own identifiers without going through a
   complicated process. To make this possible without any interaction with anybody, these peoplegroups are
   assigned identifier ranges that involve their member number in the organization. A member may assign any
   identifier from this range to the node(s) they produce, provided that each identifier is assigned to at
   most one node. A range of 255 identifiers per member is typically sufficient for hobby usage; a. Should
   a hobbyist exhaust their assigned range,fter building that many, the hobbyist can get another, larger
   assignment. It's also convenient to give hobbyists a byte as their range.

   Each organization is assigned a unique high-order two bytes. The organization member number is given 24
   bits. Byte 2 of the uUnique iIdentifier advances by 4 between groups (NMRA is 0x00, MERG is 0x04, etc)
   to allow a little more headroom on group membership numbers; this space can be reclaimed later if
   needed.

   Other groups have defined mechanisms to ensure that their node numbers or equivalent constructs are
   uniquely assigned. They may have e.g. non-technical reasons for wishing to use those same mechanisms to
   assign OpenLCB unique identifiers. Ranges of OpenLCB uUnique iIdentifier ranges can be assigned to these
   groups, so that when people then use the group's mechanism to select a value within that range, the
   result will be a properly unique OpenLCB uUnique iIdentifier.

   The first example of this is MERG CBUS developers. MERG CBUS has defined a “no cost” way of identifying
   unique 16-bit Node Number (NN) for CBUS use, perhaps with an optional 16-bit Layout Number (LN). People
   who wish to use this mechanism to allocate unique OpenLCB Node ID identifiers can, without having to
   consult anybody, generate an OpenLCB Node ID from the unique CBUS number(s) as described in the
   Standard.

   If the user is involved in determining the uUnique iIdentifier for a node (the Node ID), e.g. by setting
   switches, the possibility of duplicated nNode IDs must be considered. Users make mistakes. To reduce
   user frustration, the node should provide a user-visible way to indicating a duplicate has been seen,
   and should fully implement the relevant wire-protocol-specific methods for detecting duplicate nNode
   IDs.

  2.5.4 Unique identifiers aAssigned by sSoftware at rRunt-time

   Programs that act as one or more OpenLCB nodes need to associate unique identifiers with them. For
   licensed software, where a unique key can be associated with each instance of the program, this is easy:
   Use the manufacturer space defined above, and generate the lower bits of a specific ID from the license
   key.

   Free, open and unlicensed software can't use a license-key-based method. Unfortunately, the 48-bit
   address space is too small to use the IP-address-plus-signature GIDs that would otherwise make this a
   simple problem, or the even larger MAC-address-plus-signature GIDs.

   Initial experiments were done using 4832-bit IPv4 addresses as components of uUnique iIdentifiers, but
   this is no longer recommended for several reasons:

     * Not all IPv4 addresses are globally unique. Some IP addresses correspond to “private networks”,
       which are only locally unique. See RFC 1918 and RFC 3330 for more information. In addition,
       Microsoft defined an non-IETF “Automatic Private IP Addressing” mechanism for providing non-global
       IP addresses.

     * A single computer may run several programs, so there still needs to be separate mechanism to provide
       a unique value for the lowest bytes of the ID. That involves a level of coordination across multiple
       software vendors that's hard to imagine.

     * IPv6 is coming. It provides addresses that are too large to use directly. Even before that happens,
       the various issues of IPv4 to IPv6 mapping raise all sorts of questions about uniqueness of IPv4
       addresses.

     * Even globally routable IPv4 addresses may not be unique over time. For example, DCHP may assign the
       same address to multiple computers sequentially. This is particularly an issue with wireless access
       at e.g. clubs and shows.

   Computers that have global iInternet access, even if they don't have a permanent and unique IP address,
   can still get a uUnique IDdentifier from an openlcb.org-provided service. These uUnique IDdentifierss
   are provided from a specified range to ensure that they are unique when created. Each IDidentifier is
   only provided once to ensure that theyit remains unique. Programs using this facility should permanently
   remember uUnique IDdentifiers obtained this way, because they won't get the same one on a later request.

   Other organizations can also distribute uUnique IDdentifiers from within their allocated blocks. For
   example, an ID Unique Identifier could be provided when a free-software program is downloaded, perhaps
   as part of the download package or even as part of its filename.

   Programs without access to an ID-providing service must use some other mechanism, which may boilresult
   in down to prompting the user for a uUnique iIdentifier assigned by one of the other mechanisms.

  2.5.5 Specifically Assigned by Request

   Users can request blocks of Unique Identifiers of various sizes. The small (256) and medium (65536)
   blocks are not scarce resources. Requests for these blocks should be routinely granted once the
   requester has been identified. The 24-bit blocks are slightly scarcer, but there are still almost 2^16
   of them available by using additional values for byte 2.

   An initial automated system for requesting and obtaining unique ID ranges is available at
   http://openlcb.org/trunk/web/requestuidrange.php and subsequent pages.

  2.5.6 Unique identifiers assigned for use with locomotive control systems

  2.5.7 dentifiers

   In addition to use as node identifiers (node IDs), OpenLCB unique identifiers are used to ensure
   uniqueness of specific global event identifiers and for other purposes. These numbers must be allocated
   so that they are kept unique. The identifiers specified in this section are of that type.

   Note that the detailed use of these identifiers is specified elsewhere. In some cases, the protocols are
   still being developed, and the entry here is just reserving a range for a specific future use.inique
   uGlobally defined Locomotive Control Systems

   Locomotive control was initially beyond the scope of OpenLCB development, but later work started to
   define OpenLCB methods for working with existing locomotive control systems. This section specifies
   ranges of uUnique iIdentifiers that are reserved for the purpose of interfacing with locomotive control.
   The details of how there are to be used are specified elsewhere, but sufficient range has been reserved
   to allow providing decoders with OpenLCB unique identifiers, etc. It is important to note that at the
   time of this document's publication, locomotive control does not require any of these Unique
   Identifiers. For this reason, this Unique Identifier range is considered deprecated. Do not use these
   Unique Identifiers for any reason, they are no longer valid.

  2.5.8 RFID and NFC

   The RFID and NFC Unique Identifiers space is reserved to be used in future standards to be defined
   elsewhere.

  2.5.9 Unique identifier ranges assigned by request

   Users can request blocks of identifiers of various sizes. The small (256) and medium (65536) blocks are
   not scarce resources. Requests for these blocks should be routinely granted once the requestor has
   identified himself. The 24-bit blocks are slightly scarcer, but there are still almost 2^16 of them
   available by using additional values for byte 2.

   An initial automated system for requesting and obtaining unique ID ranges is available at
   http://openlcb.net/trunk/web/requestuidrange.php and subsequent pages.

  2.5.10 Reserved uUnique iIdentifiers

   For error detection, we permanently reserve all identifiers that start with either a 0x00 or 0xFF value.
   OpenLCB implementations should, but are not required to, treat it as an error when any of those are
   encountered.

  2.5.11 Temporary Assigned by Software at Runtime

   As described in the section 2.5.4 Assigned by Software at Runtime above, there are many reasons for
   which a node may want to be assigned a Unique Identifier at runtime. This Unique Identifier space is
   specifically designated for temporary (leased) assignment of these Unique Identifiers. There is a
   contract implied with the assignment between the server and client that is valid for a time period
   defined by the server. Once the prescribed time period expires, the client node must cease usage of the
   previously assigned Unique Identifier.

   The implementation of the client server protocol is not explicitly defined, and may use non-OpenLCB
   mechanisms, such as a TCP connection over the Internet. The following list suggests implementation
   details that are not required, but might be considered when designing such a client server pair:

     * Lease time can be extended through a renewal process.

     * The server does not reassign a previously assigned Unique Identifier until it has run through the
       entire pool allocated to it.

     * The server allows the client to suggest a Unique Identifier that it would like form the server's
       pool.

     * The client remembers its last Unique Identifier assignment and suggests to the server to be
       re-assigned this Unique Identifier upon reset, power failure, or disconnection from the server.

                                         3 Implementation Information

   Specific uUnique IDdentifier assignments are stored in a MySQL database on the http://openlcb.org
   website. The full list of assignments, include overall ranges from the specification and ranges assigned
   for specific purposes and users, can be found on the http://www.openlcb.org/trunk/web/viewuid.php
   dynamic page.

   Automated allocation systems can be abused, and we don't want to give away large chunks of address space
   to automated requestors.requesters. All available information about requests is logged. Users are asked
   for their name and contact information at the time of the request, which is also logged. Depending on
   our experience with requests, we may have to add an email challenge-response or other mechanism to
   ensure only valid requests get allocations.

   Table of Contents

   1 Introduction 1

   2 Annotations to the Standard 1

   2.1 Introduction 1

   2.2 Intended Use 1

   2.3 References and Context 1

   2.4 Content and Format 1

   2.5 Allocation 2

   2.5.1 Globally defined Unique Identifiers 2

   2.5.2 Well-Known Global Identifiers 2

   2.5.3 Self-Assigning Groups 1

   2.5.4 Assigned by Software at Run-Time 1

   2.5.5 Specifically Assigned by Request 2

   2.5.6 Locomotive Control Systems 2

   2.5.7 RFID and NFC 2

   2.5.8 Reserved Unique Identifiers 3

   3 Implementation Information 3

   Copyright 2011, 2012. All rights reserved. See http://openlcb.org/Licensing.html for license terms. 
   Page 1 of 4 - Feb 8, 20152-8-2015
