   PowerPlusWaterMarkObject1

                                                             OpenLCB Technical Note

                                                              Time Protocol(title)

                                                    Mar 4, 2013                        Preliminary          

                                                1 Introduction

   A layout control bus could do a number of useful things with fast-time information:

     * Connect a number of clock displays to keep them synchronized.

     * Provide time information to plug in devices, e.g. throttles.

     * Provide cueing for time-based occurrences, such as lights coming on and off, etc.

   Generally, fast clock systems have one unit that generates time information, and one or more units that
   consume it. Some fast clock systems track a day/date, in addition to time.

   Fast clocks run at various rates, and can be controlled by the user either at the generator or from
   other locations. Some fast clock systems broadcast run/stop and rate information, which can also be
   useful when interpolating within a fast-minute.

   There are slightly more than 2^16 seconds in a day, and just less than 2^11 minutes. An easy format
   would be 5 bits hour, 6 bits minutes, 6 bits seconds; that makes display computations easy, interval
   computations harder.

   One solution is to define a range of events that will carry time as part of the 8-byte EventID. If
   sending minutes is sufficient granularity (its a fast clock, not a clock clock; fast seconds are a lot
   of event transmissions), the 12 bits can be used for that in the 16-bit lower part of the EventID. The
   upper 6-bytes are assigned in the usual way.

   To provide a more display-friendly format, it's also possible to use 5 bits for hour and 6 bits for
   minute separately, or arranged in bytes.

   Simple nodes can then use specific EventIDs to trigger their actions at specific times. For example,
   lights in buildings in a model town can be sequenced to come on at various times by using a standard
   8-output node and configuring its consumers to different time events.

   Blue and Gold configuration can be done by putting a programming button on the master time generator
   that sends the learn message for the current clock time.

   Changes to the run/stop state and clock rate can be broadcast as separate events. That's better than
   coding them in the time events themselves, because if e.g. rate was separate bits in the event, simple
   nodes could not be configured to recognize specific times.

   If remote control of the fast clock is desired, a datagram protocol should be defined. (This makes it
   possible for e.g. throttles to have a general fast-clock-control capability built in) The NodeID of the
   fast clock is made available through its event broadcasts when it's running. Even when stopped, it
   should broadcast its time so that it can be found by nodes wanting to locate it.

   Operations:

     * Stop/start (“Stop” is similar to “Set rate zero”, but “Start” is “Set rate back to previous non-zero
       value”, which is different)

     * Set rate

     * Set time (and date?)

   This can be put into a single datagram, but having separate ones might make for easier software (no need
   to remember state, worry about update consistency, etc)

   From clock generator code:

   Event(), // time event xxx.hr.min

   Event(), // rate event xxx.00.rate

   Event(), // rate event xxx.00.rate

   Event() // rate event xxx.00.rate

   // interface:

   // To set time: blue; gold to select: hour, minute, rate; up/down to change; blue

   // To Teach: gold; blue to select: hour, minute, rate; up/down to change; gold

   // To nominate: blue, blue; gold to select: h,m,r; up/down; blue

   iOS version:

   if ( ([msg byte:0] != 0x01) || ([msg byte:1] != 0x01) || ([msg byte:2] != 0x99)

   || ([msg byte:3] != 0x01) || ([msg byte:4] != 0x01) || ([msg byte:5] != 01) ) return;

   int hour = [msg byte:6];

   int minutes = [msg byte:7];

   self.result = [NSString stringWithFormat:@"%2d:%02d", hour, minutes];

   (Put something in reserved events for locating clocks, which are node-specific if there;s more than one)

   Doesn't appear in PIP, as self-identifying

   Use of ProduceRange

                                        2 Annotations to the Standard

2.1 Introduction

   Note that this section of the Standard is informative, not normative.

2.2 Intended Use

   Note that this section of the Standard is informative, not normative.

2.3 Reference and Context

   Lorem ipsum dolor sit amet, consectetur adipiscing elit.^1 Fusce ornare mattis justo vitae imperdiet.
   Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus.

                                               3 Section Title

   Quisque sollicitudin tempor bibendum. Donec consectetur condimentum sollicitudin. Sed dignissim velit id
   felis lacinia at eleifend nisi laoreet. Vivamus tristique porta ornare. Vivamus feugiat dolor id lectus
   aliquet luctus.

                                               4 Section Title

4.1 Subsection Title

  4.1.1 Sub-subsection Title

   Praesent gravida pulvinar vehicula. Vivamus eu nisl eget sem rutrum suscipit id a magna. Integer id ante
   odio.

     * Lorem ipsum dolor sit amet, consectetur adipiscing elit.

     * Sed consectetur, ipsum et egestas accumsan, felis erat ornare mauris, sit amet suscipit ante orci
       sed massa.

                                               5 Section Title

   Quisque sollicitudin tempor bibendum. Donec consectetur condimentum sollicitudin. Sed dignissim velit id
   felis lacinia at eleifend nisi laoreet. Vivamus tristique porta ornare. Vivamus feugiat dolor id lectus
   aliquet luctus.

   Quisque sollicitudin tempor bibendum. Donec consectetur condimentum sollicitudin. Sed dignissim velit id
   felis lacinia at eleifend nisi laoreet. Vivamus tristique porta ornare. Vivamus feugiat dolor id lectus
   aliquet luctus.

   Quisque sollicitudin tempor bibendum. Donec consectetur condimentum sollicitudin. Sed dignissim velit id
   felis lacinia at eleifend nisi laoreet. Vivamus tristique porta ornare. Vivamus feugiat dolor id lectus
   aliquet luctus.

   Quisque sollicitudin tempor bibendum. Donec consectetur condimentum sollicitudin. Sed dignissim velit id
   felis lacinia at eleifend nisi laoreet. Vivamus tristique porta ornare. Vivamus feugiat dolor id lectus
   aliquet luctus.

   Quisque sollicitudin tempor bibendum. Donec consectetur condimentum sollicitudin. Sed dignissim velit id
   felis lacinia at eleifend nisi laoreet. Vivamus tristique porta ornare. Vivamus feugiat dolor id lectus
   aliquet luctus.

   Table of Contents

   Title 1

   Section Title 2

   Section Title 2

   1See the “Common Information” OpenLCB Technical Note for detailed conventions on bit and byte numbering.
   Briefly, the least significant bit of a field is numbered with zero in OpenLCB descriptions, but note
   that other technologies may use other conventions.

   Copyright 20113. All rights reserved. See http://openlcb.org/Licensing.html for license terms.  Page 1
   of 4 - Feb 6, 20133/4/2013
